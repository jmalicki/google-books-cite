"""Generate Google Books links from .gbaux file."""

import json
import re
from typing import Dict, List, Optional


def parse_gbaux_file(filepath: str) -> List[Dict[str, str]]:
    """Parse JSON .gbaux file."""
    try:
        with open(filepath, 'r', encoding='utf-8') as f:
            data = json.load(f)
        return data
    except (FileNotFoundError, json.JSONDecodeError) as e:
        raise FileNotFoundError(f"Could not read {filepath}: {e}")


def extract_page_number(page_spec: str) -> str:
    """
    Extract page number from citation page spec.
    
    Args:
        page_spec: Like "p.~123" or "pp.~123-456"
        
    Returns:
        Just the first page number like "123"
    """
    # Remove pp.~ first (before p.~) to avoid leaving a 'p'
    cleaned = page_spec.replace('pp.~', '').replace('p.~', '').replace(' ', '')
    # Handle ranges - take first page only
    if '--' in cleaned:
        cleaned = cleaned.split('--')[0]
    if '-' in cleaned:
        cleaned = cleaned.split('-')[0]
    return cleaned


def escape_url_for_latex(url: str) -> str:
    """
    Escape a URL for use in LaTeX \href commands.
    
    Args:
        url: Plain URL string
        
    Returns:
        LaTeX-safe URL with escaped special characters
        
    Note:
        For URLs inside \href{}, we need minimal escaping.
        hyperref handles most URL characters automatically.
        We only escape % and # which have special meaning in LaTeX.
    """
    # Don't escape & - hyperref handles it in URLs
    # Only escape % and # which break LaTeX parsing
    escaped = url.replace('%', r'\%')
    escaped = escaped.replace('#', r'\#')
    return escaped


def build_google_books_url(google_books_id: str, page_number: str) -> str:
    """
    Build a Google Books URL for a specific page.
    
    Args:
        google_books_id: Google Books ID
        page_number: Page number (just the number, e.g. "312")
        
    Returns:
        Complete Google Books URL
    """
    return f"https://books.google.com/books?id={google_books_id}&pg=PA{page_number}"


def get_google_books_id_from_bib(bib_content: str, citation_key: str) -> Optional[str]:
    """Extract Google Books ID for a citation key from .bib content."""
    pattern = rf'@book\{{{re.escape(citation_key)},.*?googlebooksid\s*=\s*\{{([^}}]+)\}}'
    match = re.search(pattern, bib_content, re.DOTALL | re.IGNORECASE)
    return match.group(1) if match else None


def generate_links_file(gbaux_file: str, bib_file: str, output_file: str) -> int:
    """
    Generate .gblinks.tex from .gbaux and .bib files.
    
    Args:
        gbaux_file: Path to .gbaux JSON file (e.g., main.gbaux)
        bib_file: Path to .bib file (e.g., everyone.bib)
        output_file: Path to output .tex file (e.g., main.gblinks.tex)
        
    Returns:
        Number of links generated
    """
    # Parse inputs
    page_requests = parse_gbaux_file(gbaux_file)
    
    with open(bib_file, 'r', encoding='utf-8') as f:
        bib_content = f.read()
    
    # Generate links
    links = {}
    for req in page_requests:
        citation_key = req['key']
        page_spec = req['page']
        
        # Get Google Books ID from bibliography
        gbid = get_google_books_id_from_bib(bib_content, citation_key)
        if not gbid:
            continue  # No Google Books ID available
        
        # Extract page number
        page_num = extract_page_number(page_spec)
        
        # Build and escape URL
        url = build_google_books_url(gbid, page_num)
        url_escaped = escape_url_for_latex(url)
        
        # Store (unique by citation key + page spec)
        links[(citation_key, page_spec)] = url_escaped
    
    # Write LaTeX output file
    with open(output_file, 'w', encoding='utf-8') as f:
        f.write('% Google Books links\n')
        f.write('% Auto-generated by gbfind --make-links\n')
        f.write('% Do not edit manually - will be regenerated on each build\n\n')
        
        for (citation_key, page_spec), url_escaped in links.items():
            # Define a macro that stores the URL for this specific citation+page
            f.write(f'\\expandafter\\gdef\\csname gblink@{citation_key}@{page_spec}\\endcsname{{{url_escaped}}}\n')
    
    return len(links)
